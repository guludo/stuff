#!/bin/bash

# This flag is extremely important. Each step in this script assumes that
# previous steps were succesful.
set -e

list_branches()
{
    git branch --list --format='%(refname:short)' "$@"
}

git_is_ancestor() {
    git merge-base --is-ancestor "$1" "$2"
    ret=$?
    if [[ $ret -eq 0 ]] || [[ $ret -eq 1 ]]; then
        return $ret
    fi
    exit $ret
}

git_merge() {
    local err
    if git merge --no-edit --no-ff --rerere-autoupdate "$@"; then
        return
    else
        err=$?
        if [[ -z "$(git diff)" ]] && [[ $RERERE_CONTINUE == yes ]]; then
            # If the diff is empty, it's likely that rerere mechanism was able
            # to solve conflicts automatically, let's try continuing the merge.
            git merge --continue
            return
        fi
        return $err
    fi
}

git_rebase() {
    local err
    if git rebase --rerere-autoupdate "$@"; then
        return
    else
        err=$?
        if [[ -z "$(git diff)" ]] && [[ $RERERE_CONTINUE == yes ]]; then
            # If the diff is empty, it's likely that rerere mechanism was able
            # to solve conflicts automatically, let's try continuing the rebase.
            git rebase --continue
            return
        fi
        return $err
    fi
}

find_next_baseline() {
    local ret
    ret=$(
        git log --format='%H %B' --grep '^NEXT-BASELINE$' -z --first-parent "$1~100".."$1" | \
        while read -d '' log; do
            if [[ "$log" =~ ^[0-9a-f]{40}\ NEXT-BASELINE$ ]]; then
                echo ${log%% *}
                exit 0
            fi
        done
    )
    if [[ -z "$ret" ]]; then
        echo "Failed to find baseline from $1" >&2
        exit 1
    fi
    echo "$ret"
}

has_stale_merges() {
    local revrange=$1
    local branch_pattern=$2
    for h in $(git log --merges --format=%H "$revrange"); do
        if [[ -z "$(git branch --list --points-at=$h^2 "$branch_pattern")" ]]; then
            return 0
        fi
    done
    return 1
}

usage() {
    echo "Usage: $0 [--no-rerere-continue] [-h | --help]"

    if [[ $1 == "--short" ]]; then
        return
    fi

    echo -n "
Rebuild branches with rebases and merges. The following topology is hard-coded
in this script's logic:

* Branch pullrequests is always based on MAIN_REV, which defaults to origin/main
  (or origin/master if the former is not found).
* Branches pr/* are merged into pullrequests.
* Branch next is always based on pullrequests.
* Branches nx/* are merged into next.
* Every branch nx/* is supposed to be rebased onto pullrequests. For that every
  nx/* branch needs to contain an empty commit with the subject "NEXT-BASELINE"
  in order to properly do the rebase.
* A branch next-history will contain the history of all versions of branch next.

Options:

--no-rerere-continue
  Do not continue the merge or rebase after rerere auto resolved conflicts.

--main MAIN_REV
  Use MAIN_REV instead of origin/main or origin/master.

--help, -h:
  Display this help message and exit.
"
}

RERERE_CONTINUE=yes
MAIN_REV=

enabled=$(git config get --type=bool --default=false build-branches.enable)
if [[ "$enabled" != "true" ]]; then
    echo "git build-branches seems not to be enabled. Use 'git config build-branches.enable true' to enable it." >&2
    exit 1
fi

args_from_config=$(git config get --default= build-branches.args)
set -- $args_from_config "$@"

while (($# > 0)); do
    case "$1" in
    --no-rerere-continue)
        RERERE_CONTINUE=no
        ;;
    --main)
        shift
        MAIN_REV=$1
        if [[ -z $MAIN_REV ]]; then
            echo "Option --main requires an argument." >&2
            echo >&2
            usage --short >&2
            exit 1
        fi
        ;;
    --help | -h)
        usage
        exit
        ;;
    *)
        echo "Invalid option: $1" >&2
        echo >&2
        usage --short >&2
        exit 1
        ;;
    esac
    shift
done

if [[ -z $MAIN_REV ]]; then
    if git show-ref -q --verify refs/remotes/origin/main; then
        MAIN_REV=origin/main
    elif git show-ref -q --verify refs/remotes/origin/master; then
        MAIN_REV=origin/master
    else
        echo "Missing main branch. Please use --main." >&2
        exit 1
    fi
fi

if has_stale_merges "$MAIN_REV..pullrequests" "pr/*" \
        || ! git_is_ancestor "$MAIN_REV" pullrequests; then
    git checkout -B pullrequests "$MAIN_REV"
else
    git checkout pullrequests
fi

for b in $(list_branches "pr/*"); do
    echo -e "\e[1mMerging $b into pullrequests\e[0m"
    git_merge "$b"
    echo
done

stale_merges=$(
    for h in $(git log --merges --format=%H  pullrequests..next); do
        if [[ -z "$(git branch --list --points-at=$h^2 "nx/*")" ]]; then
            echo $h
        fi
    done
)
if has_stale_merges pullrequests..next "nx/*" \
        || ! git_is_ancestor pullrequests next; then
    git checkout -B next pullrequests
    git commit -m "NEXT-BASELINE" --allow-empty
    git branch -f next-baseline
else
    git checkout next
fi

new_baseline=$(find_next_baseline next)

for b in $(list_branches "nx/*"); do
    cur_baseline=$(find_next_baseline "$b")
    # Because we use --no-ff in the rebase command to avoid missing any commit,
    # we need to check if the baseline is already correct to avoid always
    # recreating the history.
    if [[ "$new_baseline" == "$new_baseline" ]]; then
        echo -e "\e[1mBaseline for $b is already correct\e[0m"
    else
        echo -e "\e[1mRebasing $cur_baseline..$b onto the new baseline ($new_baseline)\e[0m"
        git_rebase --no-ff -r --onto "$new_baseline" "$cur_baseline" "$b"
    fi
    echo -e "\e[1mMerging $b into next\e[0m"
    git checkout next
    git_merge "$b"
    echo
done

git checkout next-history
git merge -Xtheirs next
git checkout next
